the lowest 7 bits in an address determines within the line, which byte address is:


direct mapped cache --

each row in cache stores a line

63                          0
|-----------|---------|||||||
    C           B         A

from right to left:

C.offset within line, shows which byte in the line
B.which row in cache is address
A."tag" --- stores meta information, shows exactly which address is associated with the cache. 
            stores previously accessed addresses to keep track of addresses in cache. each cache line has a single tag. 

e.g:

0x123456789abcdef --> binary

128 byte lines--->7 bits -->256 rows
# of bits = log(byte lines)

least significant 7 bits give us offset:
1111011 --> whithin line, which byte in the line

next 8 bits is which row address is found in:
10010101--> which row in cache address is



common subexpression elimination -->
eg.

int A = k+1 +3;
int B = k+1 +3;

becomes:

int kay = k+1;
int A = kay +3;
int B = kay +3;

loop unrolling-->

fewer instructions means less chance of screwing up
also fewer instrucitons = less intensive

loop blocking/tiling -->

for(i = 0; i< dim; i= i +k)
    for(j=0; j < dim; i = i +k)
        for(ii = 0;ii < K;ii++)
            for(jj = 0; jj <K, jj++)
            A[i + ii];
            ....

            going up by a certain



loop interchange-->

swap i and j for easier access of elements in an array


function inlining -->

replacing any call to a function with the actual function(maybe fixed slightly for variable
names). like subexpression elimination.

adding extra optimizations-->
i.e smoothing the center of the image, then use loops to smooth out extra edges




gcc -g -pg

file:
grpof.out

gprof










